id: dwh_refresh
namespace: company.team

tasks:
  - id: extract_load_to_datalake
    type: io.kestra.plugin.core.flow.Parallel
    concurrent: 8
    tasks:
      - id: salesforce
        type: io.kestra.plugin.fivetran.connectors.Sync
        connectorId: salesforce-connector
        apiKey: "{{secret('FIVETRAN_API_KEY')}}"
        apiSecret: "{{secret('FIVETRAN_API_SECRET')}}"

      - id: stripe
        type: io.kestra.plugin.fivetran.connectors.Sync
        connectorId: stripe-connector
        apiKey: "{{secret('FIVETRAN_API_KEY')}}"
        apiSecret: "{{secret('FIVETRAN_API_SECRET')}}"

      - id: mailchimp
        type: io.kestra.plugin.fivetran.connectors.Sync
        connectorId: mailchimp-connector
        apiKey: "{{secret('FIVETRAN_API_KEY')}}"
        apiSecret: "{{secret('FIVETRAN_API_SECRET')}}"

      - id: greenhouse
        type: io.kestra.plugin.fivetran.connectors.Sync
        connectorId: greenhouse-connector
        apiKey: "{{ secret('FIVETRAN_API_KEY') }}"
        apiSecret: "{{ secret('FIVETRAN_API_SECRET') }}"

      - id: microsoft_advertising
        type: io.kestra.plugin.fivetran.connectors.Sync
        connectorId: microsoft-advertising-connector
        apiKey: "{{ secret('FIVETRAN_API_KEY') }}"
        apiSecret: "{{ secret('FIVETRAN_API_SECRET') }}"

      - id: microsoft_dynamics_nav
        type: io.kestra.plugin.fivetran.connectors.Sync
        connectorId: dynamics-connector
        apiKey: "{{ secret('FIVETRAN_API_KEY') }}"
        apiSecret: "{{ secret('FIVETRAN_API_SECRET') }}"

  - id: custom_extract_scripts
    type: io.kestra.plugin.core.flow.ForEach
    concurrencyLimit: 0
    values: [ "https://raw.githubusercontent.com/dbt-labs/jaffle_shop/main/seeds/raw_customers.csv", "https://raw.githubusercontent.com/dbt-labs/jaffle_shop/main/seeds/raw_orders.csv", "https://raw.githubusercontent.com/dbt-labs/jaffle_shop/main/seeds/raw_payments.csv" ]
    tasks:
      - id: python_scraper
        type: io.kestra.plugin.scripts.python.Script
        inputFiles:
          data.csv: "{{ taskrun.value }}"
        beforeCommands:
          - pip install pandas
        script: |
          import pandas as pd
          df = pd.read_csv("data.csv")
          df.info()

  - id: raw_master_data_to_bigquery_stage
    type: io.kestra.plugin.core.flow.Parallel
    concurrent: 20
    tasks:
      - id: customer
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: employees
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: employee_privileges
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: privileges
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: products
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs

  - id: raw_supply_chain_to_bigquery_stage
    type: io.kestra.plugin.core.flow.Parallel
    concurrent: 8
    tasks:
      - id: inventory_transaction_types
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: inventory_transactions
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: shippers
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: suppliers
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs

  - id: raw_sales_to_bigquery_stage
    type: io.kestra.plugin.core.flow.Parallel
    concurrent: 10
    tasks:
      - id: order_details
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: order_details_status
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: orders
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: orders_status
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: orders_tax_status
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: purchase_order_status
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: purchase_orders
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: purchase_order_details
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: invoices
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
      - id: sales_reports
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs

  - id: dbt
    type: io.kestra.plugin.core.flow.WorkingDirectory
    tasks:
      - id: clone_repository
        type: io.kestra.plugin.git.Clone
        url: https://github.com/anna-geller/kestra-ee
        branch: main
        username: anna-geller
        password: "{{ secret('GITHUB_ACCESS_TOKEN') }}"

      - id: dbt_setup
        type: io.kestra.plugin.dbt.cli.Setup
        profiles:
          marketplace:
            outputs:
              prod:
                type: bigquery
                dataset: dwh
                job_retries: 1
                keyfile: sa.json
                method: service-account
                project: geller
                threads: 8
                timeout_seconds: 600
            target: prod
        exitOnFailed: true
        requirements:
          - dbt-bigquery
        taskRunner:
          type: io.kestra.plugin.scripts.runner.docker.Docker
        containerImage: python:3.10-slim
        inputFiles:
          sa.json: "{{ secret('GCP_SERVICE_ACCOUNT_JSON') }}"

      - id: dbt_build
        type: io.kestra.plugin.dbt.cli.Build
        debug: false
        taskRunner:
          type: io.kestra.plugin.scripts.runner.docker.Docker
        containerImage: python:3.10-slim
        inputFiles:
          sa.json: "{{ secret('GCP_SERVICE_ACCOUNT_JSON') }}"

pluginDefaults:
  - type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
    values:
      destinationTable: "geller.dwh.{{task.id}}"
      from:
        - "gs://dwh-geller/{{task.id}}.csv"
      writeDisposition: "WRITE_TRUNCATE"
      projectId: geller
      serviceAccount: "{{ secret('GCP_SERVICE_ACCOUNT_JSON') }}"
      ignoreUnknownValues: true
      autodetect: true
      format: CSV
      csvOptions:
        allowJaggedRows: true
        encoding: UTF-8
        fieldDelimiter: ","
