id: parallelPython
namespace: blueprint

tasks:
  - id: workingDir
    type: io.kestra.core.tasks.flows.WorkingDirectory
    tasks:
    - id: py
      type: io.kestra.plugin.scripts.python.Script
      docker:
        image: ghcr.io/kestra-io/pydata:latest
      script: |
        import pandas as pd
        import numpy as np
        from faker import Faker
        import random
        import os

        # Init faker
        fake = Faker()

        # Define product-price mapping
        product_price = {i: random.randint(10, 500) for i in range(1, 21)} 

        # Define function to create monthly order data
        def create_monthly_data(month, year=2023):
            num_orders = random.randint(100, 1000)  # Randomize number of orders
            
            # Generate random data
            order_ids = range(1, num_orders + 1)
            customer_names = [fake.name() for _ in range(num_orders)]
            customer_emails = [fake.email() for _ in range(num_orders)]
            product_ids = np.random.choice(list(product_price.keys()), size=num_orders)
            prices = [product_price[pid] for pid in product_ids]
            quantities = np.random.randint(1, 10, size=num_orders)
            totals = np.multiply(prices, quantities)

            # Create dataframe
            df = pd.DataFrame({
                'order_id': order_ids,
                'customer_name': customer_names,
                'customer_email': customer_emails,
                'product_id': product_ids,
                'price': prices,
                'quantity': quantities,
                'total': totals
            })

            # Convert month to string with zero padding
            month_str = str(month).zfill(2)

            # Save to csv
            df.to_csv(f'orders_{year}_{month_str}.csv', index=False)

        # Create monthly data for each month in 2023
        for month in range(1, 13):
            create_monthly_data(month)

    - id: out
      type: io.kestra.core.tasks.storages.LocalFiles
      outputs:
        - "*.csv"

  - id: each
    type: io.kestra.core.tasks.flows.EachParallel
    value: "{{outputs.out.uris | jq('.[]')}}"
    tasks:
      - id: path
        type: io.kestra.core.tasks.debugs.Return
        format: "{{taskrun.value}}"
